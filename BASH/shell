						shell

1.第一个shell脚本

	(1)shell脚本
	
	#!/bin/bash
	echo "Hello World !"

	#!是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。

	(2)Shell注释
	
	以"#"开头的行就是注释，会被解释器忽略。
	sh里没有多行注释，只能每一行加一个#号。

2.Shell变量
	
	(1)定义变量
		
		var="runoob.com"
	
		a.变量名不加美元符号（$)
		b.变量名和等号之间不能有空格
	

	(2)使用变量
		
		echo $var
		echo ${var}	

		a.变量名外面的花括号是可选的

	(3)只读变量,使用readonly命令可以将变量定义为只读变量
	
		myUrl="http://www.w3cschool.cc"
		readonly myUrl

	(4)删除变量unset,不能删除只读变量。

		unset var


	
3.Shell字符串

	(1)定义字符串，字符串可以用单引号，也可以用双引号，也可以不用引号
	
	str='this is a string'
		
		a.单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
		b.单引号字串中不能出现单引号（对单引号使用转义符后也不行）。

	str="Hello, I know your are \"$your_name\"! \n"
		
		a.双引号里可以有变量
		b.双引号里可以出现转义字符	


	(2)获取字符串长度  ${#var}

	string="abcd"
	echo ${#string} #输出 4

	(3)提取子字符串    ${var:index:length}
	
	string="runoob is a great site"
	echo ${string:1:4} # 输出 unoo	



4.Shell 数组
	
	
	(1)定义数组,bash支持一维数组（不支持多维数组），并且没有限定数组的大小。
		
		array_name=(value0 value1 value2 value3)
	
		array_name[0]=value0
		array_name[1]=value1
		array_name[n]=valuen

	(2)读取数组
		
		valuen=${array_name[n]}

		----使用@符号可以获取数组中的所有元素，例如：echo ${array_name[@]}
	
	
	(3)获取数组的长度
		
		#取得数组元素的个数
		length=${#array_name[@]}
		#或者
		length=${#array_name[*]}
		
		#取得数组单个元素的长度
		lengthn=${#array_name[n]}


	

5.Shell传递参数

	(1)向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……
	
		echo "执行的文件名：$0";
		echo "第一个参数为：$1";
		echo "第二个参数为：$2";
		echo "第三个参数为：$3";
		echo "参数个数为：$#";
		echo "传递的参数作为一个字符串显示：$*";//"$1 $2 $3"
		echo "传递所有参数：$@"; 	//"$1" "$2" "$3"
		
		注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数。


	(2)指定名称传递参数
	
	===============================================================	
		#!/bin/bash
		while getopts h:m option
		do 	
	    	case "$option" in
        		h)
	           	 echo "option:h, value $OPTARG"
	            	 echo "next arg index:$OPTIND";;
        		m)
	           	 echo "option:m"
        	    	 echo "next arg index:$OPTIND";;
        	    	\?)
	            	 echo "Usage: args [-h n] [-m] [-s]"
        	    	 echo "-h means hours"
	            	 echo "-m means minutes"
        	         exit 1;;
	       esac
	       done
	
	===============================================================
	    ./args -h 100 -ms

		option:h, value 100
		next arg index:3
		option:m
		next arg index:4
	===============================================================
	
		a.getopts 允许把选项堆叠在一起（如 -ms）
		b.如要带参数，须在对应选项后加 :（如h后需加参数 h:m）。此时选项和参数之间至少有一个空白字符分隔，这样的选项不能堆叠。
		c.如果在需要参数的选项之后没有找到参数，它就在给定的变量中存入 ? 
		d.另外一个特殊变量：OPTIND，反映下一个要处理的参数索引，初值是 1，每次执行getopts时都会更新。


6.Shell基本运算符


	(1)算术运算符，假定变量 a 为 10，变量 b 为 20：
	
		运算符	说明	举例
		+	加法	`expr $a + $b` 结果为 30。
		-	减法	`expr $a - $b` 结果为 -10。
		*	乘法	`expr $a \* $b` 结果为  200。
		/	除法	`expr $b / $a` 结果为 2。
		%	取余	`expr $b % $a` 结果为 0。
		=	赋值	a=$b 将把变量 b 的值赋给 a。
		==	相等。用于比较两个数字，相同则返回 true。	[ $a == $b ] 返回 false(0)。
		!=	不相等。用于比较两个数字，不相同则返回 true。	[ $a != $b ] 返回 true(1)。
	
	a.原生bash不支持简单的数学运算，expr 是一款表达式计算工具，使用它能完成表达式的求值操作。
	b.表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2

	(2)关系运算符
		
		运算符	说明	举例
		-eq	检测两个数是否相等，相等返回 true。	[ $a -eq $b ] 返回 false。
		-ne	检测两个数是否相等，不相等返回 true。	[ $a -ne $b ] 返回 true。
		-gt	检测左边的数是否大于右边的，如果是，则返回 true。	[ $a -gt $b ] 返回 false。
		-lt	检测左边的数是否小于右边的，如果是，则返回 true。	[ $a -lt $b ] 返回 true。
		-ge	检测左边的数是否大于等于右边的，如果是，则返回 true。	[ $a -ge $b ] 返回 false。
		-le	检测左边的数是否小于等于右边的，如果是，则返回 true。	[ $a -le $b ] 返回 true。

	(3)布尔运算符
	
		运算符	说明	举例
		!	非运算，表达式为 true 则返回 false，否则返回 true。	[ ! false ] 返回 true。
		-o	或运算，有一个表达式为 true 则返回 true。	[ $a -lt 20 -o $b -gt 100 ] 返回 true。
		-a	与运算，两个表达式都为 true 才返回 true。	[ $a -lt 20 -a $b -gt 100 ] 返回 false。

	(4)逻辑运算符

		运算符	说明	举例
		&&	逻辑的 AND	[[ $a -lt 100 && $b -gt 100 ]] 返回 false
		||	逻辑的 OR	[[ $a -lt 100 || $b -gt 100 ]] 返回 true

	
	(5)字符串运算符，假定变量 a 为 "abc"，变量 b 为 "efg"：
	
		运算符	说明	举例
		=	检测两个字符串是否相等，相等返回 true。	[ $a = $b ] 返回 false。
		!=	检测两个字符串是否相等，不相等返回 true。	[ $a != $b ] 返回 true。
		-z	检测字符串长度是否为0，为0返回 true。	[ -z $a ] 返回 false。
		-n	检测字符串长度是否为0，不为0返回 true。	[ -n $a ] 返回 true。
		str	检测字符串是否为空，不为空返回 true。	[ $a ] 返回 true。

	(6)文件测试运算符
	
		操作符	说明	举例
		-b file	检测文件是否是块设备文件，如果是，则返回 true。	[ -b $file ] 返回 false。
		-c file	检测文件是否是字符设备文件，如果是，则返回 true。	[ -c $file ] 返回 false。
		-d file	检测文件是否是目录，如果是，则返回 true。	[ -d $file ] 返回 false。
		-f file	检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。	[ -f $file ] 返回 true。
		-r file	检测文件是否可读，如果是，则返回 true。	[ -r $file ] 返回 true。
		-w file	检测文件是否可写，如果是，则返回 true。	[ -w $file ] 返回 true。
		-x file	检测文件是否可执行，如果是，则返回 true。	[ -x $file ] 返回 true。


7.Shell test 命令
	
======================================================
	num1=100
	num2=100
	if test $[num1] -eq $[num2]
	then
	    echo '两个数相等！'
	else
	    echo '两个数不相等！'
	fi

	代码中的 [] 执行基本的算数运算

======================================================
	num1="ru1noob"
	num2="runoob"
	if test $num1 = $num2
	then
	    echo '两个字符串相等!'
	else
	    echo '两个字符串不相等!'
	fi

======================================================


8.Shell 流程控制


========================if else=================================

	a=10
	b=20
	if [ $a == $b ]
	then
	   echo "a 等于 b"
	elif [ $a -gt $b ]
	then
	   echo "a 大于 b"
	elif [ $a -lt $b ]
	then
	   echo "a 小于 b"
	else
	   echo "没有符合的条件"
	fi


=======================for 循环================================
	
	for loop in 1 2 3 4 5
	do
	    echo "The value is: $loop"
	done

	
========================while 语句=================================

	int=1
	while(( $int<=5 ))
	do
	        echo $int
        	let "int++"
	done
	
	let命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量

========================case多选择语句=================================
	
	echo '输入 1 到 4 之间的数字:'
	echo '你输入的数字为:'
	read aNum
	case $aNum in
	    1)  echo '你选择了 1'
	    ;;
	    2)  echo '你选择了 2'
	    ;;
	    3)  echo '你选择了 3'
	    ;;
	    4)  echo '你选择了 4'
	    ;;
	    *)  echo '你没有输入 1 到 4 之间的数字'
	    ;;
	esac

	跳出循环
	break命令允许跳出所有循环（终止执行后面的所有循环）。
	continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。

==========================================================================-
	
9.Shell 函数

======================================================================
	demoFun(){
	    echo "这是我的第一个 shell 函数!"
	}
	echo "-----函数开始执行-----"
	demoFun
	echo "-----函数执行完毕-----"

	
	funWithReturn(){
  	  echo "这个函数会对输入的两个数字进行相加运算..."
   	  echo "输入第一个数字: "
   	  read aNum
   	  echo "输入第二个数字: "
   	  read anotherNum
   	  echo "两个数字分别为 $aNum 和 $anotherNum !"
   	  return $(($aNum+$anotherNum))
	}	
	funWithReturn
	echo "输入的两个数字之和为 $? !"

	函数返回值在调用该函数后通过 $? 来获得。
=====================================================================
	


10.Shell 文件包含

	Shell 可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。
	
	. filename   # 注意点号(.)和文件名中间有一空格

	或

	source filename


	